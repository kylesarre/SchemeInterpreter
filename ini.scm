(define (caar l)
  (car (car l)))
(define (cadr l)
  (car (cdr l)))
(define (cdar l)
  (cdr (car l)))
(define (cddr l)
  (cdr (cdr l)))
(define (caaar l)
  (car (car (car l))))
(define (caadr l)
  (car (car (cdr l))))
(define (cadar l)
  (car (cdr (car l))))
(define (cdaar l)
  (cdr (car (car l))))
(define (caddr l)
  (car (cdr (cdr l))))
(define (cddar l)
  (cdr (cdr (car l))))
(define (cdadr l)
  (cdr (car (cdr l))))
(define (cdddr l)
  (cdr (cdr (cdr l))))
(define (caaaar l)
  (car (car (car (car l)))))
(define (caaadr l)
  (car (car (car (cdr (l))))))
(define (caadar l)
  (car (car (cdr (car l)))))
(define (cadaar l)
  (car (cdr (car (car l)))))
(define (cdaaar l)
  (cdr (car (car (car l)))))
(define (caaddr l)
  (car (car (cdr (cdr l)))))
(define (caddar l)
  (car (cdr (cdr (car l)))))
(define (cddaar l)
  (cdr (cdr (car (car l)))))
(define (cadadr l)
  (car (cdr (car (cdr l)))))
(define (cdadar l)
  (cdr (car (cdr (car l)))))
(define (cdaadr l)
  (cdr (car (car (cdr l)))))
(define (cdddar l)
  (cdr (cdr (cdr (car l)))))
(define (cddadr l)
  (cdr (cdr (car (cdr l)))))
(define (cdaddr l)
  (cdr (car (cdr (cdr l)))))
(define (cadddr l)
  (car (cdr (cdr (cdr l)))))
(define (cddddr l)
  (cdr (cdr (cdr (cdr l)))))

(define (eqv? v1 v2)
  (cond
    ((number? v1) (if (number? v2) (= v1 v2) #f))
    ((string? obj1) (if (string? obj2) (string=? obj1 obj2) #f))
    ((null? obj1) (if (null? obj2) #t #f))
    ((symbol? obj1) (if (symbol? obj2) (symbol=? obj1 obj2) #f))
    ((null? obj1) (if (null? obj2) #t #f))
    ((eq? v1 v2) #t)
    (else #f)
  )
)
(define (equal? obj1 obj2)
  (cond
    ((pair? obj1) (if (pair? obj2)
      (if (equal? (car obj1) (car obj2)) (equal? (cdr obj1) (cdr obj2)) #f) #f
    ))
    ((number? obj1) (if (number? obj2) (= obj1 obj2) #f))
    ((string? obj1) (if (string? obj2) (string=? obj1 obj2) #f))
    ((symbol? obj1) (if (symbol? obj2) (symbol=? obj1 obj2) #f))
    ((null? obj1) (if (null? obj2) #t #f))
    ((eq? obj1 obj2) #t)
    (else #f)
  )
)
(define (= . args)
  (cond
    ((null? args) #t)
    ((null? (cdr args)) #t)
    ((b= (car args) (car (cdr args))) (apply = (cdr args)))
    (else #f)
  )
)
(define (< . args)
  (cond
    ((null? args) #t)
    ((null? (cdr args)) #t)
    ((b< (car args) (car (cdr args))) (apply < (cdr args)))
    (else #f)
  )
)
(define (> . args)
  (cond
    ((null? args) #t)
    ((null? (cdr args)) #t)
    ((b< (car (cdr args)) (car args)) (apply > (cdr args)))
    (else #f)
  )
)
(define (<= . args)
  (cond
    ((null? args) #t)
    ((null? (cdr args)) #t)
    ((b< (car args) (car (cdr args))) (apply <= (cdr args)))
    ((b= (car args) (car (cdr args))) (apply <= (cdr args)))
    (else #f)
  )
)
(define (>= . args)
  (cond
    ((null? args) #t)
    ((null? (cdr args)) #t)
    ((b< (car (cdr args)) (car args)) (apply >= (cdr args)))
    ((b= (car args) (car (cdr args))) (apply >= (cdr args)))
    (else #f)
  )
)
(define (zero? z)
  (= z 0)
)
(define (positive? x)
  (> x 0)
)
(define (negative? x)
  (< x 0)
)
(define (odd? n)
  (cond
    ((negative? n) (> (* 2 (b/ n 2)) n))
    ((positive? n) (< (* 2 (b/ n 2)) n))
    ((zero? n) #f)
  )
)
(define (even? n)
  (= (* 2 (b/ n 2)) n)
)
(define (+ . args)
  (cond
    ((null? args) 0)
    ((null? (cdr args)) (car args))
    (else (b+ (b+ (car args) (cadr args)) (apply + (cddr args))))
  )
)
(define (- . args)
  (cond
    ((null? args) 0)
    ((null? (cdr args)) (b- 0 (car args)))
    (else (b- (b- (car args) (cadr args)) (apply + (cddr args))))
  )
)
(define (* . args)
  (cond
    ((null? args) 1)
    ((null? (cdr args)) (car args))
    (else (b* (b* (car args) (cadr args)) (apply * (cddr args))))
  )
)
(define (max . args)
  (cond
    ((null? (cdr args)) (car args))
    (else (if (>= (car args) (apply max (cdr args))) (car args) (apply max (cdr args))))
  )
)
(define (min . args)
  (cond
    ((null? (cdr args)) (car args))
    (else (if (<= (car args) (apply min (cdr args))) (car args) (apply min (cdr args))))
  )
)
(define (not bool)
  (cond
    ((equal? bool #t) #f)
    ((equal? bool #f) #t)
    (else #f)
  )
)
(define (and . args)
  (cond
    ((null? args) #t)
  )
)
(define (or . args)
  ()
)
(define (list . args)
  (cond
    ((null? args) '())
    (else (cons (car args) (apply list (cdr args))))
  )
)
(define (length)
  ()
)
(define (append)
  ()
)
(define (reverse)
  ()
)
