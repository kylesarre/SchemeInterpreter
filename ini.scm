(define (caar l)
  (car (car l)))
(define (cadr l)
  (car (cdr l)))
(define (cdar l)
  (cdr (car l)))
(define (cddr l)
  (cdr (cdr l)))
(define (caaar l)
  (car (car (car l))))
(define (caadr l)
  (car (car (cdr l))))
(define (cadar l)
  (car (cdr (car l))))
(define (cdaar l)
  (cdr (car (car l))))
(define (caddr l)
  (car (cdr (cdr l))))
(define (cddar l)
  (cdr (cdr (car l))))
(define (cdadr l)
  (cdr (car (cdr l))))
(define (cdddr l)
  (cdr (cdr (cdr l))))
(define (caaaar l)
  (car (car (car (car l)))))
(define (caaadr l)
  (car (car (car (cdr (l))))))
(define (caadar l)
  (car (car (cdr (car l)))))
(define (cadaar l)
  (car (cdr (car (car l)))))
(define (cdaaar l)
  (cdr (car (car (car l)))))
(define (caaddr l)
  (car (car (cdr (cdr l)))))
(define (caddar l)
  (car (cdr (cdr (car l)))))
(define (cddaar l)
  (cdr (cdr (car (car l)))))
(define (cadadr l)
  (car (cdr (car (cdr l)))))
(define (cdadar l)
  (cdr (car (cdr (car l)))))
(define (cdaadr l)
  (cdr (car (car (cdr l)))))
(define (cdddar l)
  (cdr (cdr (cdr (car l)))))
(define (cddadr l)
  (cdr (cdr (car (cdr l)))))
(define (cdaddr l)
  (cdr (car (cdr (cdr l)))))
(define (cadddr l)
  (car (cdr (cdr (cdr l)))))
(define (cddddr l)
  (cdr (cdr (cdr (cdr l)))))

(define (eqv? v1 v2)
  (cond
    ((number? v1) (if (number? v2) (= v1 v2) #f))
    ((symbol? v1) (if (symbol? v2)
      (cond
        ((string=? v1 v2) #t)
        ((char=? v1 v2) #t)
        (else #f)
      ) #f)
    )
    ((null? v1) (null? v2))
    ((eq? v1 v2) #t)
    (else #f)
  )
)
(define (equal? obj1 obj2)
  (cond

    ((number? obj1) (if (number? obj2) (= obj1 obj2) #f))
    ((string? obj1) (if (string? obj2) (string=? obj1 obj2) #f))
    ((symbol? obj1) (if (symbol? obj2) (symbol=? obj1 obj2) #f))
    ((null? obj1) (if (null? obj2) #t #f))
    (else #f)
  )
)
